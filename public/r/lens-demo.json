{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "lens-demo",
  "type": "registry:example",
  "title": "Lens Demo",
  "description": "Example showing a lens effect component",
  "registryDependencies": [
    "lens"
  ],
  "files": [
    {
      "path": "registry/example/lens-demo.tsx",
      "content": "/* eslint-disable @next/next/no-img-element */\n\n\"use client\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Lens } from \"../magicui/lens\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function LensDemo() {\n  return (\n    <div className=\"relative justify-center\">\n      <Card className=\"max-w-md shadow-none\">\n        <CardHeader>\n          <Lens\n            zoomFactor={2}\n            lensSize={150}\n            isStatic={false}\n            ariaLabel=\"Zoom Area\"\n          >\n            <img\n              src=\"https://images.unsplash.com/photo-1736606355698-5efdb410fe93?q=80&w=2071&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n              alt=\"image placeholder\"\n              width={500}\n              height={500}\n            />\n          </Lens>\n        </CardHeader>\n        <CardContent>\n          <CardTitle className=\"text-2xl\">Your next camp</CardTitle>\n          <CardDescription>\n            See our latest and best camp destinations all across the five\n            continents of the globe.\n          </CardDescription>\n        </CardContent>\n        <CardFooter className=\"space-x-4\">\n          <Button>Let&apos;s go</Button>\n          <Button variant=\"secondary\">Another time</Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/lens-demo.tsx"
    },
    {
      "path": "registry/magicui/lens.tsx",
      "content": "\"use client\";\n\nimport React, { useCallback, useRef, useState, useMemo } from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\n\ninterface Position {\n  /** The x coordinate of the lens */\n  x: number;\n  /** The y coordinate of the lens */\n  y: number;\n}\n\ninterface LensProps {\n  /** The children of the lens */\n  children: React.ReactNode;\n  /** The zoom factor of the lens */\n  zoomFactor?: number;\n  /** The size of the lens */\n  lensSize?: number;\n  /** The position of the lens */\n  position?: Position;\n  /** The default position of the lens */\n  defaultPosition?: Position;\n  /** Whether the lens is static */\n  isStatic?: boolean;\n  /** The duration of the animation */\n  animationDuration?: number;\n  /** The color of the lens */\n  lensColor?: string;\n  /** The aria label of the lens */\n  ariaLabel?: string;\n}\n\nconst createLensStyles = (\n  x: number,\n  y: number,\n  size: number,\n  color: string,\n) => ({\n  maskImage: `radial-gradient(circle ${size / 2}px at ${x}px ${y}px, ${color} 100%, transparent 100%)`,\n  WebkitMaskImage: `radial-gradient(circle ${size / 2}px at ${x}px ${y}px, ${color} 100%, transparent 100%)`,\n  transformOrigin: `${x}px ${y}px`,\n});\n\nconst createZoomStyles = (x: number, y: number, factor: number) => ({\n  transform: `scale(${factor})`,\n  transformOrigin: `${x}px ${y}px`,\n});\n\nexport function Lens({\n  children,\n  zoomFactor = 1.5,\n  lensSize = 170,\n  isStatic = false,\n  position = { x: 0, y: 0 },\n  defaultPosition,\n  animationDuration = 0.3,\n  lensColor = \"black\",\n  ariaLabel = \"Zoom Area\",\n}: LensProps) {\n  const validatedZoomFactor = zoomFactor < 1 ? 1 : zoomFactor;\n  const validatedLensSize = lensSize < 0 ? 170 : lensSize;\n\n  const [isHovering, setIsHovering] = useState(false);\n  const [mousePosition, setMousePosition] = useState<Position>({\n    x: 100,\n    y: 100,\n  });\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const currentPosition = useMemo(() => {\n    if (isStatic) return position;\n    if (defaultPosition && !isHovering) return defaultPosition;\n    return mousePosition;\n  }, [isStatic, position, defaultPosition, isHovering, mousePosition]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMousePosition({\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    });\n  }, []);\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === \"Escape\") setIsHovering(false);\n  }, []);\n\n  const LensContent = useMemo(() => {\n    const { x, y } = currentPosition;\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.58 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.8 }}\n        transition={{ duration: animationDuration, ease: \"easeOut\" }}\n        className=\"absolute inset-0 overflow-hidden\"\n        style={{\n          ...createLensStyles(x, y, validatedLensSize, lensColor),\n          zIndex: 50,\n        }}\n      >\n        <div\n          className=\"absolute inset-0\"\n          style={createZoomStyles(x, y, validatedZoomFactor)}\n        >\n          {children}\n        </div>\n      </motion.div>\n    );\n  }, [\n    currentPosition,\n    validatedLensSize,\n    lensColor,\n    validatedZoomFactor,\n    children,\n    animationDuration,\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"relative z-20 overflow-hidden rounded-xl\"\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n      onMouseMove={handleMouseMove}\n      onKeyDown={handleKeyDown}\n      role=\"region\"\n      aria-label={ariaLabel}\n      tabIndex={0}\n    >\n      {children}\n      {isStatic || defaultPosition ? (\n        <div>{LensContent}</div>\n      ) : (\n        <AnimatePresence>\n          {isHovering && <div>{LensContent}</div>}\n        </AnimatePresence>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/magicui/lens.tsx"
    }
  ]
}